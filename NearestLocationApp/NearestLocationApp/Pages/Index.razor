@page "/"
@using NearestLocationApp.Data;
@using DataAccessLibrary;
@using System.Linq;

@inject ExcelParser ExcelParser;
@inject GoogleMapsApi GoogleMapsApi;
@inject ICarsData CarsData;

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>
 
<b>Input a excel file with cars here:</b>
<InputFile OnChange="@ImportExcelFile" accept=".xlsx, .xls, .csv" />
<br/>
<br/>
<br/>

<b>Input a pickup-zipcode and dropoff-zipcode here: </b>
<input placeholder="Pick up zip code" @bind="@PickUpLocation" @bind:event="oninput" type="number" />
<input placeholder="Drop off zip code" @bind="@DropOffLocation" @bind:event="oninput" type="number" />

<button @onclick="@SortDestinations">Sort</button>

<table class="table">
    <thead>
        <tr>
            <th>Unit</th>
            <th>Location</th>
            <th>DeadHead Miles</th>
            <th>ETA to PU</th>
            <th>Loaded Miles</th>
            <th>Transit Time</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var route in RouteList)
        {
            <tr>
                <td><a href="@route.Direction.MapLink">@route.Car.Name</a></td>
                <td>@route.Car.Location</td>
                <td>@route.Direction.PickUpRide.Distance.Text</td>
                <td>@route.Direction.PickUpRide.Duration.Text</td>
                <td>@route.Direction.DropOffRide.Distance.Text</td>
                <td>@route.Direction.DropOffRide.Duration.Text</td>
            </tr>
        }
    </tbody>
</table>

@code
{
    public List<Route> RouteList = new List<Route>();

    public string PickUpLocation = "";
    public string DropOffLocation = "";

    private List<Car> _cars = new List<Car>();

    protected override async Task OnInitializedAsync()
    {
        _cars = await CarsData.GetCars();
        CreateRouteList();

        await base.OnInitializedAsync();
    }

    public async Task ImportExcelFile(InputFileChangeEventArgs e)
    {
        _cars = await ExcelParser.ParseCars(e);
        await CarsData.SetCars(_cars);
        CreateRouteList();
    }

    public async Task SortDestinations()
    {
        RouteList = await GoogleMapsApi.GetRouteInformationList(RouteList, PickUpLocation, DropOffLocation);

        RouteList = RouteList.OrderBy(route => route.Direction.PickUpRide.Distance.Value == -1).ThenBy(route => route.Direction.PickUpRide.Distance.Value).ToList();
    }

    private void CreateRouteList()
    {
        RouteList.Clear();
        foreach(var car in _cars)
        {
            var newRoute = new Route();
            newRoute.Car = car;

            RouteList.Add(newRoute);
        }
    }
}