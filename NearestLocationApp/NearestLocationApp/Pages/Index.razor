@page "/"
@using NearestLocationApp.Data;
@using DataAccessLibrary;
@using System.Linq;

@inject ExcelParser ExcelParser;
@inject GoogleMapsApi GoogleMapsApi;
@inject ICarsData CarsData;

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>
 
<b>Input a excel file with cars here:</b>
<InputFile OnChange="@ImportExcelFile" accept=".xlsx, .xls, .csv" />
<br/>
<br/>
<br/>

<b>Input a pickup-zipcode and dropoff-zipcode here: </b>
<input placeholder="Pick up zip code" @bind="@pickUpZipCode" @bind:event="oninput" type="number" />
<input placeholder="Drop off zip code" @bind="@dropOffZipCode" @bind:event="oninput" type="number" />

<button @onclick="@SortDestinations">Sort</button>

<table class="table">
    <thead>
        <tr>
            <th>Car Name</th>
            <th>Zip Code</th>
            <th>From car to pick up distance</th>
            <th>From car to pick up duration</th>
            <th>From pick up to drop off distance</th>
            <th>From pick up to drop off duration</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var direction in CarDirections)
        {
            <tr>
                <td><a href="@direction.MapLink">@destination.Car.CarName</a></td>
                <td>@direction.Car.ZipCode</td>
                <td>@direction.ToPickUpRide.DistanceString</td>
                <td>@direction.ToPickUpRide.DurationString</td>
                <td>@direction.ToDropOffRide.DistanceString</td>
                <td>@direction.ToDropOffRide.DurationString</td>
            </tr>
        }
    </tbody>
</table>

@code
{
    public List<Direction> CarDirections = new List<Direction>();
    public string pickUpZipCode;
    public string dropOffZipCode;

    private List<Car> _cars = new List<Car>();

    public async Task ImportExcelFile(InputFileChangeEventArgs e)
    {
        _cars = await ExcelParser.ParseCars(e);
        await CarsData.SetCars(_cars);
        CarToCarRides();
    }

    public async Task SortDestinations()
    {
        CarDirections = await GoogleMapsApi.GetRideInformation(CarDirections, pickUpZipCode, dropOffZipCode);

        CarDirections = CarDirections.OrderBy(x => x.ToPickUpRide.DurationValue).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        _cars = await CarsData.GetCars();
        CarToCarRides();
        await base.OnInitializedAsync();
    }

    private void CarToCarRides()
    {
        CarDirections.Clear();
        foreach(var car in _cars)
        {
            CarDirections.Add(new Direction(car));
        }
    }
}